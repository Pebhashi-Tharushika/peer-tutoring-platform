package com.mbpt.peertutoringplatform.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.mbpt.peertutoringplatform.common.Constants;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Schema(name = "Mentor", description = "A data model representing a mentor in the platform")
public class MentorDTO {
    @JsonProperty("mentor_id")
    @Schema(description = "Unique identifier of the mentor. Automatically generated by the system", example = "1", accessMode = Schema.AccessMode.READ_ONLY)
    private Integer mentorId;

    @NotBlank(message = "Clerk mentor ID must not be blank")
    @JsonProperty("clerk_mentor_id")
    @Schema(description = "Unique identifier of the mentor. Automatically generated by the authentication system", example = "sifn4kamudq1", accessMode = Schema.AccessMode.READ_ONLY)
    private String clerkMentorId;

    @NotBlank(message = "First name must not be blank")
    @JsonProperty("first_name")
    @Schema(description = "First name of the mentor", example = "Daniel", requiredMode = Schema.RequiredMode.REQUIRED)
    private String firstName;

    @NotBlank(message = "Last name must not be blank")
    @JsonProperty("last_name")
    @Schema(description = "Last name of the mentor", example = "Andrew", requiredMode = Schema.RequiredMode.REQUIRED)
    private String lastName;

    @NotBlank(message = "Address must not be blank")
    @JsonProperty("address")
    @Schema(description = "Address of the mentor", example = "123 Elm St, Springfield, IL 62704, USA", requiredMode = Schema.RequiredMode.REQUIRED)
    private String address;

    @Email(message = "Email must be valid")
    @NotBlank(message = "Email must not be blank")
    @JsonProperty("email")
    @Schema(description = "Email of the mentor", example = "daniel@gmail.com", requiredMode = Schema.RequiredMode.REQUIRED)
    private String email;

    @Pattern(regexp = "^\\+[1-9]\\d{6,14}$", message = "Phone number must be valid E.164 format. Must start with '+' followed by 7-15 digits only.")
    @NotBlank(message = "Phone number must not be blank")
    @JsonProperty("phone_number")
    @Schema(description = "Phone number of the mentor", example = "+15559876543", requiredMode = Schema.RequiredMode.REQUIRED)
    private String phoneNumber;

    @NotNull(message = "Title can't be null")
    @JsonProperty("title")
    @Schema(description = "Title or honorific of the mentor such as Mr., Ms., Dr.", example = "Mr.", requiredMode = Schema.RequiredMode.REQUIRED)
    private Constants.Title title;

    @NotNull(message = "Session fee must not be null")
    @Min(value = 0, message = "Session fee must be non-negative")
    @JsonProperty("session_fee")
    @Schema(description = "The fee charged by the mentor for a single session.", example = "2500", requiredMode = Schema.RequiredMode.REQUIRED)
    private Double sessionFee;

    @NotBlank(message = "Profession must not be blank")
    @JsonProperty("profession")
    @Schema(description = "The mentor's current profession or occupational role", example = "Senior Tech Lead", requiredMode = Schema.RequiredMode.REQUIRED)
    private String profession;

    @NotBlank(message = "Subject must not be blank")
    @JsonProperty("subject")
    @Schema(description = "Mentor's introductory biography, detailing their teaching background, subject specializations, and areas of expertise.", example = "I'm David, an AWS Cloud Architect.Guided 100+ to AWS SA & DevOps certs via practical, exam-focused strategies.", requiredMode = Schema.RequiredMode.REQUIRED)
    private String subject;

    @NotBlank(message = "Qualification must not be blank")
    @JsonProperty("qualification")
    @Schema(description = "Mentor's key professional qualification or relevant experience.", example = "Tutor since 2014", requiredMode = Schema.RequiredMode.REQUIRED)
    private String qualification;

    @NotBlank(message = "Mentor profile image URL must not be blank")
    @JsonProperty("mentor_image")
    @Schema(description = "The URL linking to the mentor's profile image.", example = "https://example.com/profiles/mentor_id_123.webp", requiredMode = Schema.RequiredMode.REQUIRED)
    private String mentorImage;

    @JsonProperty("is_certified")
    @Schema(description = "whether the mentor is certified", example = "true")
    private Boolean isCertified;

    @JsonProperty("positive_reviews")
    @Schema(description = "The percentage of positive reviews received by the mentor, ranging from 0 to 100.")
    private Integer positiveReviews;

    @NotNull(message = "The list of Classrooms' ID must not be null")
    @JsonProperty("classrooms")
    @Schema(description = "A list of all classrooms' IDs conducted by the mentor.", example = "[2,5,9]", requiredMode = Schema.RequiredMode.REQUIRED)
    private List<Integer> classRoomIdList;
}
