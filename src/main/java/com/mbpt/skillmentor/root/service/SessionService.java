package com.mbpt.skillmentor.root.service;

import com.mbpt.skillmentor.root.common.Constants;
import com.mbpt.skillmentor.root.dto.AuditDTO;
import com.mbpt.skillmentor.root.dto.PaymentDTO;
import com.mbpt.skillmentor.root.dto.SessionDTO;
import com.mbpt.skillmentor.root.dto.SessionLiteDTO;

import java.util.List;

/**
 * Service interface for managing session-related operations.
 * This includes session creation, retrieving all sessions,
 * auditing session data, and generating mentor payment summaries.
 */
public interface SessionService {

    /**
     * Creates a new session with the given session details.
     *
     * @param sessionDTO the session data transfer object containing session details
     * @return the created {@link SessionDTO } with its generated ID and saved values
     */
    public abstract SessionLiteDTO createSession(SessionLiteDTO sessionDTO);


    /**
     * Retrieves a session by its ID.
     *
     * @param sessionId the ID of the session to retrieve
     * @return a SessionDTO object representing the session
     */
    public abstract SessionDTO getSessionById(Integer sessionId);


    /**
     * Retrieves all session records with student, mentor, and classroom details.
     *
     * @return a list of {@link SessionDTO} instances representing the sessions
     */
    public abstract List<SessionDTO> getAllSessions();


    /**
     * Retrieves all sessions by student Clerk ID.
     *
     * @param studentClerkId the ID for the student generated by Clerk, to retrieve all sessions of the student
     * @return a list of {@link SessionDTO} instances representing the sessions
     */
    List<SessionDTO> getAllSessionsByStudentClerkId(String studentClerkId);

    /**
     * Updates the status of an existing session
     *
     * @param sessionId     the ID of the session to update
     * @param sessionStatus the new status to set
     * @return a SessionDTO object representing the updated session
     */
    SessionDTO updateSessionStatus(Integer sessionId, Constants.SessionStatus sessionStatus);


    /**
     * Retrieves all session audit records.
     * This typically includes detailed info about each session for reporting or auditing.
     *
     * @return a list of {@link AuditDTO} instances representing the session audit DTOs
     */
    public abstract List<AuditDTO> getAllAudits();


    /**
     * Retrieves a list of mentor's total payments within a given date range.
     * This method fetches and calculates the total payment details for all sessions
     * conducted between the given start and end dates (inclusive). It is typically
     * used for generating mentor payment summaries.
     *
     * @param startDate the start date of the time period (inclusive), in ISO format (e.g., "2025-01-01")
     * @param endDate   the end date of the time period (inclusive), in ISO format (e.g., "2025-01-31")
     * @return a list of {@link PaymentDTO} instances representing the payments made to mentors
     */
    public abstract List<PaymentDTO> findMentorPayments(String startDate, String endDate);
}
